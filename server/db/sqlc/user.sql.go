// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO task (id, title, description) VALUES ($1, $2, $3) RETURNING id, title, description, completed
`

type CreateUserParams struct {
	ID          int32  `json:"id"`
	Title       string `json:"title"`
	Description string `json:"description"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.Title, arg.Description)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Completed,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM task WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, title, description, completed FROM task WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (Task, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Completed,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, title, description, completed FROM task
`

func (q *Queries) ListUsers(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE task SET title = $2, description = $3 WHERE id = $1
`

type UpdateUserParams struct {
	ID          int32  `json:"id"`
	Title       string `json:"title"`
	Description string `json:"description"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.ID, arg.Title, arg.Description)
	return err
}
